{\rtf1\ansi\ansicpg1251\deff0\nouicompat\deflang1049{\fonttbl{\f0\fnil\fcharset0 Courier New;}{\f1\fnil Courier New;}}
{\colortbl ;\red174\green181\blue189;\red169\green183\blue198;\red92\green122\blue184;\red89\green124\blue194;\red38\green125\blue255;\red130\green142\blue186;\red128\green125\blue110;\red122\green122\blue122;\red217\green175\blue108;\red102\green166\blue255;}
{\*\generator Riched20 6.3.9600}\viewkind4\uc1 
\pard\box\brdrdash\brdrw0 \cf1\f0\fs18\lang1033   \cf2\f1 Path path \cf1 = \cf2 Paths\cf1 .\i get\i0 (\cf2 filesToSendToCloud\cf1 .get(i).getAbsolutePath())\cf3 ;\line                     \cf4 double \cf2 sizeOfFile \cf1 = \cf2 path\cf1 .toFile().length()\cf3 ;\line                     \cf4 if \cf1 ((\cf2 sizeOfFile\cf1 /(\cf5 1024\cf1 *\cf5 1024\cf1 )) > \cf5 40\cf1 )\{\line                         \cf6\i bufferedInputStream \cf1\i0 = \cf4 new \cf1 BufferedInputStream(\cf4 new \cf1 FileInputStream(\cf2 path\cf1 .toFile()))\cf3 ;\line                         \cf4 double \cf2 numberOfPortions \cf1 = \cf2 Math\cf1 .\i ceil\i0 ((\cf2 sizeOfFile\cf1 /(\cf5 40\cf1 *\cf5 1024\cf1 *\cf5 1024\cf1 )))\cf3 ;\line                         \cf4 long \cf2 lastPortionSize \cf1 = ((\cf4 long\cf1 )\cf2 sizeOfFile\cf1 ) % (\cf5 40\cf1 *\cf5 1024\cf1 *\cf5 1024\cf1 )\cf3 ;\line                         \cf4 byte\cf1 [] byteArray = \cf4 new byte\cf1 [\cf5 40\cf1 *\cf5 1024\cf1 *\cf5 1024\cf1 ]\cf3 ;\line                         \cf2 System\cf1 .\cf6\i out\cf1\i0 .println((\cf4 long\cf1 )\cf2 sizeOfFile\cf1 )\cf3 ;\line                         \cf2 System\cf1 .\cf6\i out\cf1\i0 .println(\cf2 lastPortionSize\cf1 )\cf3 ;\line                         \cf2 System\cf1 .\cf6\i out\cf1\i0 .println(\cf2 numberOfPortions\cf1 )\cf3 ;\line                         \cf2 System\cf1 .\cf6\i out\cf1\i0 .println(\cf7\b "--------------"\cf1\b0 )\cf3 ;\line                         \cf4 for \cf1 (\cf4 int \cf1 j = \cf5 0\cf3 ; \cf1 j < \cf2 numberOfPortions\cf3 ; \cf1 j++)\{\line                             \cf4 if \cf1 (j == \cf2 numberOfPortions \cf1 && \cf2 lastPortionSize \cf1 !=\cf5 0\cf1 )\{\line                                 byteArray = \cf4 new byte\cf1 [(\cf4 int\cf1 )\cf2 lastPortionSize\cf1 ]\cf3 ;\line                                 \cf2 System\cf1 .\cf6\i out\cf1\i0 .println(byteArray.\cf6 length\cf1 )\cf3 ;\line                             \cf1\}\line                             \cf4 for \cf1 (\cf4 int \cf1 k = \cf5 0\cf3 ; \cf1 k < byteArray.\cf6 length\cf3 ; \cf1 k++) \{\line                                 \cf2 System\cf1 .\cf6\i out\cf1\i0 .println(\cf7\b "----"\cf1\b0 )\cf3 ;\line                                 \cf2 System\cf1 .\cf6\i out\cf1\i0 .println(byteArray.\cf6 length\cf1 )\cf3 ;\line                                 \cf4 if \cf1 (k == \cf5 0\cf1 )\{\line                                     \cf6\i bufferedInputStream\cf1\i0 .read(byteArray\cf3 ,\cf5 0\cf3 ,\cf1 byteArray.\cf6 length\cf1 )\cf3 ;\line                                     \cf2 System\cf1 .\cf6\i out\cf1\i0 .println(byteArray.\cf6 length\cf1 )\cf3 ;\line                                 \cf1\}\cf4 else \cf1\{\line                                     \cf6\i bufferedInputStream\cf1\i0 .read(byteArray\cf3 ,\cf1 (k*byteArray.\cf6 length\cf1 )\cf3 ,\cf1 byteArray.\cf6 length\cf1 )\cf3 ;\line                                 \cf1\}\line                                 \cf2 System\cf1 .\cf6\i out\cf1\i0 .println(byteArray.\cf6 length \cf1 +\cf7\b " "\cf1\b0 + \cf2 numberOfPortions\cf1 )\cf3 ;\line\cf8 //                              outcomingStream.writeObject(new BigFileMessage(CurrentLogin.getCurrentLogin(), path.getFileName().toString(),byteArray,j,(int)numberOfPortions));\par
\par
\cf4 public void \cf9 dragFromLocalStorageToCloud\cf1 () \{\line     \cf6 listOfLocalElements\cf1 .setOnDragDetected(\cf2 event \cf1 -> \{\line         \cf2 File pathToLocalStorage \cf1 = \cf4 new \cf1 File(\cf7\b "ClientSide" \cf1\b0 + \cf2 File\cf1 .\cf6\i separator \cf1\i0 + \cf7\b "LocalStorage"\cf1\b0 )\cf3 ;\line         \cf2 File\cf1 [] \cf2 listOfLocalStorageFiles \cf1 = \cf2 pathToLocalStorage\cf1 .listFiles()\cf3 ;\line         \cf2 Dragboard db \cf1 = \cf6 listOfLocalElements\cf1 .startDragAndDrop(\cf2 TransferMode\cf1 .\cf6\i NONE\cf1\i0 )\cf3 ;\line         \cf2 ClipboardContent content \cf1 = \cf4 new \cf1 ClipboardContent()\cf3 ;\line         \cf2 List\cf1 <\cf2 File\cf1 > \cf2 localFiles \cf1 = \cf4 new \cf1 LinkedList<\cf2 File\cf1 >()\cf3 ;\line         \cf2 localFiles\cf1 .addAll(getPathsOfSelectedFilesInLocalStorage())\cf3 ;\line         \cf2 content\cf1 .putFiles(\cf2 localFiles\cf1 )\cf3 ;\line         \cf2 db\cf1 .setContent(\cf2 content\cf1 )\cf3 ;\line     \cf1\})\cf3 ;\line     \cf6 listOfLocalElements\cf1 .setOnDragOver(\cf4 new \cf2 EventHandler\cf1 <\cf2 DragEvent\cf1 >() \{\line         \cf10\b @Override\line         \cf4\b0 public void \cf9 handle\cf1 (\cf2 DragEvent event\cf1 ) \{\line             \cf2 event\cf1 .acceptTransferModes(\cf2 TransferMode\cf1 .\cf6\i NONE\cf1\i0 )\cf3 ;\line         \cf1\}\line     \})\cf3 ;\line\line     \cf6 listOfCloudStorageElements\cf1 .setOnDragDropped(\cf2 event \cf1 -> \{\line         \cf2 Dragboard db \cf1 = \cf2 event\cf1 .getDragboard()\cf3 ;\line         \cf2 event\cf1 .acceptTransferModes(\cf2 TransferMode\cf1 .\cf6\i COPY\cf1\i0 )\cf3 ;\line\line     \cf1\})\cf3 ;\line\cf1\}\par
\line\cf4 public void \cf9 showModalWindow\cf1 (\cf2 ActionEvent event\cf1 ) \{\line     \cf4 try \cf1\{\line         \cf2 Stage stage \cf1 = \cf4 new \cf1 Stage()\cf3 ;\line         \cf2 Parent root \cf1 = \cf2 FXMLLoader\cf1 .\i load\i0 (getClass().getResource(\cf7\b "FileTransferModalWindow.fxml"\cf1\b0 ))\cf3 ;\line         \cf2 Image appIcon \cf1 = \cf4 new \cf1 Image(getClass().getResourceAsStream(\cf7\b "/icons/cloudicon.png"\cf1\b0 ))\cf3 ;\line         \cf2 Scene scene \cf1 = \cf4 new \cf1 Scene(\cf2 root\cf3 , \cf5 400\cf3 ,\cf5 120\cf1 )\cf3 ;\line         \cf2 stage\cf1 .setScene(\cf2 scene\cf1 )\cf3 ;\line         \cf2 stage\cf1 .getIcons().add(\cf2 appIcon\cf1 )\cf3 ;\line         \cf2 stage\cf1 .setTitle(\cf7\b "Transfering files.."\cf1\b0 )\cf3 ;\line         \cf2 stage\cf1 .initModality(\cf2 Modality\cf1 .\cf6\i APPLICATION_MODAL\cf1\i0 )\cf3 ;\line         \cf2 stage\cf1 .show()\cf3 ;\line     \cf1\} \cf4 catch \cf1 (\cf2 IOException e\cf1 ) \{\line         \cf2 e\cf1 .printStackTrace()\cf3 ;\line     \cf1\}\line\line\}\par
\par
\cf4 public static void \cf9 getRecursion\cf1 (\cf2 File initialPath\cf1 )\{\line     \cf2 System\cf1 .\cf6\i out\cf1\i0 .println(\i getPathOfDirectoriesInDirectory\i0 (\cf2 initialPath\cf1 ))\cf3 ;\line\cf1\}\line\cf4 public void \cf9 showPathsOfFolders\cf1 ()\{\line     \cf2 File file \cf1 = \cf4 new \cf1 File(\cf7\b "folder"\cf1\b0 )\cf3 ;\line     \cf1\i getRecursion\i0 (\cf2 file\cf1 .getAbsoluteFile())\cf3 ;\line\cf1\}\par
\cf4 public static \cf2 LinkedList\cf1 <\cf2 File\cf1 > \cf9 getPathsOfDirectoriesInDirectory\cf1 (\cf2 File initialDirectory\cf1 )\{\line      \cf6\i pathsOfDirectories \cf1\i0 = \cf4 new \cf1 LinkedList<>()\cf3 ;\line      \cf2 File file \cf1 = \cf4 new \cf1 File(\i getPathOfDirectoriesInDirectory\i0 (\cf2 initialDirectory\cf1 ))\cf3 ;\line      \cf6\i pathsOfDirectories\cf1\i0 .add(\cf2 file\cf1 )\cf3 ;\line      \cf6\i pathOfDirectories \cf1\i0 = \cf7\b ""\cf3\b0 ;\line      \cf4 return \cf6\i pathsOfDirectories\cf3\i0 ;\line\cf1\}\line\line\cf4 public static \cf2 String  \cf9 getPathOfDirectoriesInDirectory\cf1 (\cf2 File initialDirectory\cf1 )\{\line     \cf6\i pathOfDirectories \cf1\i0 += \cf2 initialDirectory\cf1 .toString()+\cf2 File\cf1 .\cf6\i separator\cf3\i0 ;\line     \cf4 if \cf1 (\cf2 initialDirectory\cf1 .isDirectory())\{\line         \cf4 for\cf1 (\cf2 File c \cf1 : \cf2 initialDirectory\cf1 .listFiles())\{\line             \i getPathOfDirectoriesInDirectory\i0 (\cf2 c\cf1 )\cf3 ;\line         \cf1\}\line     \}\line     \cf4 return \cf6\i pathOfDirectories\cf3\i0 ;\line\cf1\}\par
\par

\pard\box\brdrdash\brdrw0    \cf4 public static \cf2 LinkedList\cf1 <\cf2 File\cf1 > \cf9 getPathOfDirectoriesInDirectory\cf1 (\cf2 File initialDirectory\cf1 )\{\line     \cf6\i list\cf1\i0 .add(\cf2 initialDirectory\cf1 )\cf3 ;\line     \cf4 if \cf1 (\cf2 initialDirectory\cf1 .isDirectory())\{\line             \cf4 for\cf1 (\cf2 File c \cf1 : \cf2 initialDirectory\cf1 .listFiles())\{\line                 \i getPathOfDirectoriesInDirectory\i0 (\cf2 c\cf1 )\cf3 ;\line             \cf1\}\line     \}\line     \cf4 return \cf6\i list\cf3\i0 ;\line\cf1\}\line\cf4 public static \cf2 LinkedList\cf1 <\cf2 File\cf1 > \cf9 parseAndGetPathsOfDirectories\cf1 (\cf2 String string\cf1 )\{\line     \cf2 LinkedList\cf1 <\cf2 File\cf1 > \cf2 list \cf1 = \cf4 new \cf1 LinkedList<>()\cf3 ;\line     \cf2 String\cf1 [] \cf2 paths \cf1 = \cf2 string\cf1 .split(\cf7\b "stop"\cf1\b0 )\cf3 ;\line     \cf4 for \cf1 (\cf4 int \cf1 i = \cf5 0\cf3 ; \cf1 i < \cf2 paths\cf1 .\cf6 length \cf3 ; \cf1 i++) \{\line         \cf2 File file \cf1 = \cf4 new \cf1 File(\cf2 paths\cf1 [i].substring(\cf5 24\cf1 ))\cf3 ;\line         \cf2 list\cf1 .add(\cf2 file\cf1 )\cf3 ;\line     \cf1\}\line     \cf4 return \cf2 list\cf3 ;\line\cf1\}\line\cf4 public static \cf2 LinkedList\cf1 <\cf2 File\cf1 > \cf9 getPathsOfDirectories\cf1 (\cf2 String login\cf3 , \cf2 File initialDirectory\cf1 )\{\line     \cf4 int \cf2 size \cf1 = \i getPathOfDirectoriesInDirectory\i0 (\cf2 initialDirectory\cf1 ).size()\cf3 ;\line     \cf2 LinkedList\cf1 <\cf2 File\cf1 > \cf2 list \cf1 = \cf4 new \cf1 LinkedList<>()\cf3 ;\line     \cf4 for \cf1 (\cf4 int \cf1 i = \cf5 1\cf3 ; \cf1 i < \cf2 size\cf3 ; \cf1 i++) \{\line         \cf2 File file \cf1 = \cf4 new \cf1 File(\i getPathOfDirectoriesInDirectory\i0 (\cf2 initialDirectory\cf1 ).get(i).toString().substring(\cf5 25\cf1 +\cf2 login\cf1 .length()))\cf3 ;\line         \cf2 list\cf1 .add(\cf2 file\cf1 )\cf3 ;\line     \cf1\}\line     \cf4 return \cf2 list\cf3 ;\line\cf1\}\par

\pard\box\brdrdash\brdrw0 \line\par
\cf8\line                             \cf1\}\par

\pard\cf0\f0\fs22\par
}
 